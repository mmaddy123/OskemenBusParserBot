from aiogram import types, Router, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from states import SelectBusStop
from oskemen_bus_parser import get_incoming_bus, get_bus_stop_names,\
    get_bus_routes, get_bus_stop_by_url, get_bus_stop_html
from keyboards import create_bus_routes_buttons


buses = Router()


@buses.message(Command("get_incoming_bus"))
async def get_incoming_bus_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ")
    await state.set_state(SelectBusStop.bus_stop_name)


@buses.message(SelectBusStop.bus_stop_name, F.text.in_(get_bus_stop_names().keys()))
async def select_bus_stop_handler(message: types.Message, state: FSMContext):
    await state.update_data(bus_stop_name=message.text)
    await state.set_state(SelectBusStop.bus_stop_html)
    await message.answer("–ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã...")
    await get_incoming_bus_html_handler(message, state)


@buses.message(SelectBusStop.bus_stop_name)
async def selected_incorrect_bus_stop_handler(message: types.Message):
    await message.answer("–û—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                         "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"
                         "–∞–≤—Ç–æ–±—É—Å–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /get_bus_stops")


@buses.message(SelectBusStop.bus_stop_html)
async def get_incoming_bus_html_handler(message: types.Message, state: FSMContext):
    bus_stop_data = await state.get_data()
    bus_stop_url = get_bus_stop_by_url(bus_stop_data["bus_stop_name"])
    bus_stop_html = get_bus_stop_html(bus_stop_url)
    await state.update_data(bus_stop_html=bus_stop_html)

    bus_routes = get_bus_routes(bus_stop_html)
    if bus_routes is None:
        await message.answer(text="–ü–æ –¥–∞–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤")
        await state.clear()
    else:
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç", reply_markup=create_bus_routes_buttons(bus_routes))
        await state.set_state(SelectBusStop.bus_route)


@buses.message(SelectBusStop.bus_route)
async def select_bus_route_handler(message: types.Message, state: FSMContext):
    await state.update_data(bus_route=message.text)
    bus_route_data = await state.get_data()
    if get_bus_routes(bus_route_data["bus_stop_html"]) is None:
        await message.answer("–ü–æ –¥–∞–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤")
        await state.clear()
    else:
        incoming_bus = get_incoming_bus(bus_route_data["bus_route"],
                                        bus_route_data["bus_stop_html"], bus_route_data["bus_stop_name"])
        result = f"üöè –û—Å—Ç–∞–Ω–æ–≤–∫–∞: {incoming_bus[0]}\n" \
                 f"üöç –ú–∞—Ä—à—Ä—É—Ç: {incoming_bus[1]}\n" \
                 f"‚åõÔ∏è –ü—Ä–∏–±—É–¥–µ—Ç —á–µ—Ä–µ–∑: {incoming_bus[2]}\n"\
                 f"‚åõÔ∏è –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–±—É–¥–µ—Ç —á–µ—Ä–µ–∑: {incoming_bus[3]}\n"
        await message.answer(text=result, reply_markup=ReplyKeyboardRemove())
        await state.clear()


# @router.message(SelectBusStop.bus_route)
# async def selected_incorrect_bus_route(message: types.Message):
#     await message.answer("–¢–∞–∫–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ—Ç –∏–ª–∏ –∞–≤—Ç–æ–±—É—Å—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ö–æ–¥—è—Ç\n"
#                          "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–∞—Ä—à—Ä—É—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel: ")



